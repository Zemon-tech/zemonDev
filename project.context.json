{
  "projectName": "Zemon Community Platform",
  "description": "A collaborative platform with Arena, Crucible, Hackathons, Showcases, and an admin panel. Features include real-time chat, user roles, content management, and AI integration.",
  "frontend": {
    "framework": "React (Vite, TypeScript)",
    "directory": "frontend/src",
    "mainEntry": "App.tsx",
    "pages": [
      "AdminPage.tsx", "ArenaPage.tsx", "CruciblePage.tsx", "CrucibleProblemPage.tsx", "DashboardPage.tsx", "ForgeDetailPage.tsx", "ForgePage.tsx", "LandingPage.tsx", "PlaceholderPage.tsx", "ProfilePage.tsx", "ResultPage.tsx", "SettingsPage.tsx", "SignInPage.tsx", "SignUpPage.tsx"
    ],
    "components": {
      "admin": ["AdminPanel.tsx", "ProtectedAdminRoute.tsx", "UserList.tsx"],
      "arena": ["ChatChannel.tsx", "DirectMessageChannel.tsx", "HackathonChannel.tsx", "ShowcaseChannel.tsx", "RulesChannel.tsx", "AnnouncementsChannel.tsx", "NirvanaChannel.tsx", "HackathonRules.tsx", "StartHereChannel.tsx", "ArenaErrorBoundary.tsx"]
    },
    "services": ["api.service.ts", "socket.service.ts"],
    "context": ["UserRoleContext.tsx", "ThemeContext.tsx", "WorkspaceContext.tsx"],
    "hooks": ["useArenaChannels.ts", "useArenaChat.ts", "useArenaHackathon.ts", "useArenaShowcase.ts", "useArenaSocket.ts"],
    "lib": ["crucibleApi.ts", "forgeApi.ts", "utils.ts"],
    "auth": {
      "provider": "Clerk",
      "integration": "@clerk/clerk-react for frontend, Clerk JWT for API requests",
      "userFlow": "SignInPage.tsx and SignUpPage.tsx use Clerk widgets; after sign in, user is redirected to dashboard. UserRoleContext fetches role from backend using Clerk JWT."
    },
    "apiIntegration": {
      "baseUrl": "VITE_BACKEND_URL",
      "service": "api.service.ts",
      "authHeader": "Bearer <token> from Clerk",
      "endpoints": [
        "/api/arena/channels", "/api/arena/channels/:id/messages", "/api/arena/showcase", "/api/arena/hackathons/current", "/api/arena/hackathons/:id/leaderboard", "/api/users/me", "/api/users/me/role"
      ]
    },
    "adminPanel": {
      "requirements": "Accessible via button in top nav bar, visible only to admin/moderator, drawer overlay on Arena page, tab layout (Users, Channel, Content), role-based access control, UI with placeholder content first"
    }
  },
  "backend": {
    "framework": "Express (TypeScript)",
    "directory": "backend/src",
    "entry": "index.ts",
    "apiRoutes": {
      "/api/users/me": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getCurrentUser"
      },
      "/api/users/me/role": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getUserRole"
      },
      "/api/users/me": {
        "method": "PATCH",
        "middleware": ["protect"],
        "controller": "updateCurrentUser"
      },
      "/api/users/webhooks/clerk": {
        "method": "POST",
        "middleware": [],
        "controller": "handleClerkWebhook"
      },
      "/api/admin/users": {
        "method": "GET",
        "middleware": ["protect", "checkRole(['admin', 'moderator'])"],
        "controller": "getAllUsers"
      },
      "/api/ai/ask": {
        "method": "POST",
        "middleware": ["protect", "aiLimiter"],
        "controller": "askAI"
      },
      "/api/ai/analyze-solution": {
        "method": "POST",
        "middleware": ["protect", "aiLimiter"],
        "controller": "analyzeUserSolution"
      },
      "/api/ai/generate-hints": {
        "method": "POST",
        "middleware": ["protect", "aiLimiter"],
        "controller": "generateProblemHints"
      },
      "/api/arena/channels": {
        "method": "GET",
        "middleware": ["standardLimiter", "protect", "cacheMiddleware(300)"],
        "controller": "getChannels"
      },
      "/api/arena/channels/unread-counts": {
        "method": "GET",
        "middleware": ["standardLimiter", "protect"],
        "controller": "getAllUnreadCounts"
      },
      "/api/arena/channels/:channelId/messages": {
        "method": "GET",
        "middleware": ["standardLimiter", "protect"],
        "controller": "getChannelMessages"
      },
      "/api/arena/channels/:channelId/messages": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect"],
        "controller": "createMessage"
      },
      "/api/arena/channels/:channelId/messages/:messageId": {
        "method": "DELETE",
        "middleware": ["standardLimiter", "protect"],
        "controller": "deleteMessage"
      },
      "/api/arena/channels/:channelId/unread-count": {
        "method": "GET",
        "middleware": ["standardLimiter", "protect"],
        "controller": "getUnreadMessageCount"
      },
      "/api/arena/channels/:channelId/mark-read": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect"],
        "controller": "markAllAsRead"
      },
      "/api/arena/hackathons/current": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(300)"],
        "controller": "getCurrentHackathon"
      },
      "/api/arena/hackathons/:hackathonId/leaderboard": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(60)"],
        "controller": "getHackathonLeaderboard"
      },
      "/api/arena/hackathons/:hackathonId/submit": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect"],
        "controller": "submitHackathonSolution"
      },
      "/api/arena/hackathons/history": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(600)"],
        "controller": "getHackathonHistory"
      },
      "/api/arena/showcase": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(300)"],
        "controller": "getShowcasedProjects"
      },
      "/api/arena/showcase": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect"],
        "controller": "submitProject"
      },
      "/api/arena/showcase/:projectId/upvote": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect"],
        "controller": "upvoteProject"
      },
      "/api/arena/showcase/:projectId/upvote": {
        "method": "DELETE",
        "middleware": ["standardLimiter", "protect"],
        "controller": "removeUpvote"
      },
      "/api/arena/showcase/:projectId/downvote": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect"],
        "controller": "downvoteProject"
      },
      "/api/arena/showcase/:projectId/downvote": {
        "method": "DELETE",
        "middleware": ["standardLimiter", "protect"],
        "controller": "removeDownvote"
      },
      "/api/arena/users/:userId/ban": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect", "checkRole(['admin', 'moderator'], true)"],
        "controller": "banUser"
      },
      "/api/arena/users/:userId/unban": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect", "checkRole(['admin', 'moderator'], true)"],
        "controller": "unbanUser"
      },
      "/api/arena/users/:userId/kick": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect", "checkRole(['admin', 'moderator'], true)"],
        "controller": "kickUser"
      },
      "/api/arena/users/:userId/make-moderator": {
        "method": "POST",
        "middleware": ["standardLimiter", "protect", "checkRole(['admin'], true)"],
        "controller": "makeModerator"
      },
      "/api/crucible": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(600)"],
        "controller": "getAllChallenges"
      },
      "/api/crucible/:id": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(600)"],
        "controller": "getChallengeById"
      },
      "/api/crucible/:challengeId/solutions": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(300)"],
        "controller": "getSolutions"
      },
      "/api/crucible/:challengeId/solutions": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "submitSolution"
      },
      "/api/crucible/:problemId/analyze": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "analyzeUserSolution"
      },
      "/api/crucible/results/:analysisId": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getAnalysisResult"
      },
      "/api/crucible/:problemId/draft": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getDraft"
      },
      "/api/crucible/:problemId/draft": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateDraft"
      },
      "/api/crucible/:problemId/draft/archive": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "archiveDraft"
      },
      "/api/crucible/:problemId/draft/versions": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getDraftVersions"
      },
      "/api/crucible/:problemId/notes": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getNotes"
      },
      "/api/crucible/:problemId/notes": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateNotes"
      },
      "/api/crucible/:problemId/notes": {
        "method": "DELETE",
        "middleware": ["protect"],
        "controller": "deleteNotes"
      },
      "/api/crucible/:problemId/chats": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getChatSessions"
      },
      "/api/crucible/:problemId/chats": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "createChatSession"
      },
      "/api/crucible/:problemId/chats/:chatId": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getChatSession"
      },
      "/api/crucible/:problemId/chats/:chatId/messages": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "addChatMessage"
      },
      "/api/crucible/:problemId/chats/:chatId": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateChatSession"
      },
      "/api/crucible/:problemId/chats/:chatId": {
        "method": "DELETE",
        "middleware": ["protect"],
        "controller": "deleteChatSession"
      },
      "/api/crucible/:problemId/workspace": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getWorkspaceState"
      },
      "/api/crucible/:problemId/workspace": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateWorkspaceState"
      },
      "/api/crucible/:problemId/diagrams": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getDiagrams"
      },
      "/api/crucible/:problemId/diagrams": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "createDiagram"
      },
      "/api/crucible/:problemId/diagrams/:diagramId": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getDiagram"
      },
      "/api/crucible/:problemId/diagrams/:diagramId": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateDiagram"
      },
      "/api/crucible/:problemId/diagrams/:diagramId": {
        "method": "DELETE",
        "middleware": ["protect"],
        "controller": "deleteDiagram"
      },
      "/api/crucible/:problemId/progress": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getProgress"
      },
      "/api/crucible/:problemId/progress": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateProgress"
      },
      "/api/crucible/:problemId/progress/milestones/:milestoneId": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateMilestone"
      },
      "/api/crucible/:problemId/progress/milestones": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "addMilestone"
      },
      "/api/crucible/:problemId/progress/milestones/:milestoneId": {
        "method": "DELETE",
        "middleware": ["protect"],
        "controller": "deleteMilestone"
      },
      "/api/crucible/:problemId/research": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getResearchItems"
      },
      "/api/crucible/:problemId/research": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "createResearchItem"
      },
      "/api/crucible/:problemId/research/:itemId": {
        "method": "GET",
        "middleware": ["protect"],
        "controller": "getResearchItem"
      },
      "/api/crucible/:problemId/research/:itemId": {
        "method": "PUT",
        "middleware": ["protect"],
        "controller": "updateResearchItem"
      },
      "/api/crucible/:problemId/research/:itemId": {
        "method": "DELETE",
        "middleware": ["protect"],
        "controller": "deleteResearchItem"
      },
      "/api/forge": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(600)"],
        "controller": "getAllResources"
      },
      "/api/forge/:id": {
        "method": "GET",
        "middleware": ["standardLimiter", "cacheMiddleware(300)"],
        "controller": "getResourceById"
      },
      "/api/forge/:id/view": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "incrementResourceView"
      },
      "/api/forge/:id/bookmark": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "bookmarkResource"
      },
      "/api/forge/:id/review": {
        "method": "POST",
        "middleware": ["protect"],
        "controller": "reviewResource"
      },
      "/api/webhook": {
        "method": "POST",
        "middleware": ["express.raw({ type: 'application/json' })"],
        "controller": "clerkWebhookHandler"
      }
    },
    "middleware": {
      "auth": {
        "file": "middleware/auth.middleware.ts",
        "protect": "ClerkExpressRequireAuth + local DB user attach",
        "checkRole": "Checks user role (admin/moderator/user), supports channel-specific roles"
      },
      "rateLimiting": {
        "file": "middleware/rateLimiter.middleware.ts",
        "standardLimiter": "500 req/15min (prod), 1000/min (dev)",
        "strictLimiter": "30 req/15min for sensitive ops",
        "authLimiter": "10 req/15min for auth endpoints",
        "aiLimiter": "5 req/min for AI endpoints"
      }
    },
    "db": {
      "type": "MongoDB",
      "models": {
        "User": {
          "fields": ["clerkId", "email", "fullName", "username", "collegeDetails", "profile", "interests", "stats", "bookmarkedResources", "completedSolutions", "activeDrafts", "archivedDrafts", "workspacePreferences", "createdAt", "updatedAt"]
        },
        "UserRole": {
          "fields": ["userId", "role", "channelId", "grantedBy", "grantedAt"],
          "roleEnum": ["user", "moderator", "admin"]
        },
        "ArenaChannel": {
          "fields": ["name", "type", "group", "description", "isActive", "createdBy", "moderators", "permissions", "parentChannelId", "createdAt", "updatedAt"]
        },
        "ArenaMessage": {
          "fields": ["channelId", "userId", "username", "content", "type", "replyToId", "mentions", "createdAt", "updatedAt", "editedAt", "isDeleted"]
        },
        "ProjectShowcase": {
          "fields": ["title", "description", "images", "gitRepositoryUrl", "demoUrl", "userId", "username", "upvotes", "downvotes", "upvotedBy", "downvotedBy", "isApproved", "submittedAt", "createdAt", "updatedAt"]
        },
        "HackathonSubmission": {
          "fields": ["hackathonId", "userId", "username", "solution", "codeFiles", "demoUrl", "explanation", "score", "feedback", "isWinner", "position", "createdAt", "updatedAt"]
        },
        "WeeklyHackathon": {
          "fields": ["title", "description", "startDate", "endDate", "problems", "createdAt", "updatedAt"]
        },
        "CrucibleProblem": {
          "fields": ["title", "description", "difficulty", "tags", "requirements", "constraints", "expectedOutcome", "hints", "createdBy", "metrics", "status", "createdAt", "updatedAt"]
        },
        "CrucibleSolution": {
          "fields": ["problemId", "userId", "content", "status", "aiAnalysis", "reviews", "metrics", "createdAt", "updatedAt"]
        },
        "CrucibleNote": {
          "fields": ["userId", "problemId", "content", "tags", "status", "createdAt", "updatedAt"]
        },
        "CrucibleDiagram": {
          "fields": ["userId", "problemId", "title", "type", "content", "thumbnail", "status", "createdAt", "updatedAt"]
        },
        "ForgeResource": {
          "fields": ["title", "type", "url", "description", "tags", "difficulty", "createdBy", "reviews", "metrics", "isExternal", "createdAt", "updatedAt"]
        },
        "ProgressTracking": {
          "fields": ["userId", "problemId", "status", "timeSpent", "milestones", "lastActiveAt", "createdAt", "updatedAt"]
        },
        "SolutionDraft": {
          "fields": ["problemId", "userId", "content", "status", "versions", "createdAt", "updatedAt"]
        },
        "SolutionAnalysis": {
          "fields": ["problemId", "userId", "analysisResult", "parameters", "createdAt", "updatedAt"]
        },
        "AIChatHistory": {
          "fields": ["userId", "problemId", "title", "messages", "status", "createdAt", "updatedAt"]
        },
        "WorkspaceState": {
          "fields": ["userId", "problemId", "activeMode", "layout", "editorSettings", "createdAt", "updatedAt"]
        },
        "ResearchItem": {
          "fields": ["problemId", "userId", "title", "content", "tags", "createdAt", "updatedAt"]
        },
        "UserChannelStatus": {
          "fields": ["userId", "channelId", "status", "joinedAt", "leftAt", "createdAt", "updatedAt"]
        }
      }
    },
    "auth": {
      "provider": "Clerk",
      "middleware": "ClerkExpressRequireAuth",
      "userAttach": "User fetched from DB using Clerk ID after Clerk JWT auth"
    },
    "rateLimits": {
      "standard": "500 req/15min (prod)",
      "strict": "30 req/15min",
      "auth": "10 req/15min",
      "ai": "5 req/min"
    }
  },
  "userFlows": {
    "signIn": "User signs in via Clerk widget (SignInPage), token stored by Clerk, frontend fetches /api/users/me and /api/users/me/role with Bearer token",
    "roleDetection": "UserRoleContext fetches /api/users/me/role, sets role in context, used for access control in frontend",
    "adminPanelAccess": "Admin panel button visible only if userRole is admin/moderator, access to /api/admin/users protected by checkRole middleware"
  },
  "security": {
    "auth": "JWT via Clerk, validated in backend, user attached from DB",
    "roleBasedAccess": "checkRole middleware for admin/moderator routes",
    "rateLimiting": "Express Rate Limit with Redis, various strictness for endpoints"
  },
  "integration": {
    "frontendToBackend": "All API requests from frontend use ApiService with Bearer token from Clerk, endpoints match Express routes, role and user info fetched as needed"
  },
  "ai": {
    "endpoints": ["/api/ai", "/api/ai/chat"],
    "rateLimit": "5 req/min"
  }
}
