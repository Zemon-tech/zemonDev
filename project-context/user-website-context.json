{
  "meta": {
    "name": "Quild User Website Context",
    "generatedAt": "2025-08-11T00:00:00Z",
    "projects": {
      "frontend": "frontend/",
      "backend": "backend/"
    },
    "notes": "This JSON is designed to give an LLM a full understanding of the user website's backend and frontend: routes, schemas, middleware, services, realtime events, data fetching, auth, and user flows."
  },
  "backend": {
    "overview": {
      "entryFile": "backend/src/index.ts",
      "baseApiPath": "/api",
      "tech": ["Node.js", "Express", "TypeScript", "MongoDB (Mongoose)", "Redis", "Socket.IO", "Clerk (Auth)"]
    },
    "server": {
      "cors": {
        "allowedOriginsEnv": "CORS_ORIGIN",
        "allowedOriginsDefault": ["http://localhost:5173", "http://localhost:5175"],
        "allowedHeaders": ["Content-Type", "Authorization", "X-Requested-With", "Accept", "Origin", "Cookie"],
        "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
        "credentials": true
      },
      "parsers": {
        "jsonLimit": "10mb",
        "urlencodedLimit": "10mb",
        "cookieParser": true
      },
      "authLayer": {
        "library": "@clerk/clerk-sdk-node",
        "globalMiddleware": "ClerkExpressWithAuth",
        "jwtKeyEnv": "CLERK_JWT_KEY",
        "authorizedParties": "same as CORS origins"
      },
      "http": {
        "listenPortEnv": "PORT",
        "defaultPort": 5000,
        "socketIoPortEnv": "SOCKET_IO_PORT"
      },
      "connections": {
        "mongo": "backend/src/config/database.ts",
        "redis": "backend/src/config/redis.ts",
        "changeStreams": {
          "enabledEnv": "ENABLE_CHANGE_STREAMS",
          "service": "backend/src/services/changeStreams.service.ts"
        }
      }
    },
    "auth": {
      "requestProtection": {
        "middleware": "protect",
        "file": "backend/src/middleware/auth.middleware.ts",
        "flow": [
          "ClerkExpressRequireAuth validates session and attaches req.auth",
          "Find local user by req.auth.userId -> User.findOne({ clerkId })",
          "Attach user document to req.user"
        ]
      },
      "roleChecks": {
        "function": "checkRole(roles: ['admin'|'moderator'], checkChannel?: boolean)",
        "source": "backend/src/middleware/auth.middleware.ts",
        "behavior": "Queries UserRole model for global or channel-specific roles; attaches req.userRole; returns 403 if not allowed"
      },
      "errorHandling": {
        "file": "backend/src/middleware/error.middleware.ts",
        "knownErrors": ["CastError", "11000 duplicate key", "ValidationError", "JWT/Clerk errors", "TokenExpiredError"],
        "responseShape": {"success": false, "message": "string"}
      }
    },
    "middleware": {
      "rateLimiter": {
        "file": "backend/src/middleware/rateLimiter.middleware.ts",
        "presets": {
          "standardLimiter": {"dev": "very high", "prod": {"max": 500, "windowMs": "15m"}},
          "strictLimiter": {"max": 30, "windowMs": "15m"},
          "authLimiter": {"max": 10, "windowMs": "15m"},
          "aiLimiter": {"max": 5, "windowMs": "1m"}
        }
      },
      "cache": {
        "file": "backend/src/middleware/cache.middleware.ts",
        "uses": "Redis",
        "keyFormat": "api:{userId|anonymous}:{req.originalUrl}",
        "ttlDefaultSeconds": 600,
        "notes": "Only caches GET responses; can be disabled in dev unless CACHE_ENABLED=true"
      },
      "socket": {
        "auth": {
          "file": "backend/src/middleware/socketAuth.middleware.ts",
          "verifies": "Clerk JWT via verifyToken",
          "mapsClerkToUser": "Finds MongoDB user by clerkId; sets socket.data.user = { userId, sessionId }"
        },
        "rateLimit": "backend/src/middleware/socketRateLimit.middleware.ts (used in send_message flow)"
      }
    },
    "routes": {
      "mounts": {
        "/api/health": "backend/src/api/health.routes.ts",
        "/api/users": "backend/src/api/user.routes.ts",
        "/api/crucible": "backend/src/api/crucible.routes.ts",
        "/api/forge": "backend/src/api/forge.routes.ts",
        "/api/ai": "backend/src/api/ai.routes.ts",
        "/api/profile": "backend/src/api/profile.routes.ts",
        "/api/admin": "backend/src/api/admin.routes.ts",
        "/api/arena/channels": "backend/src/api/arena-channels.routes.ts",
        "/api/arena/showcase": "backend/src/api/arena-showcase.routes.ts",
        "/api/arena/hackathons": "backend/src/api/arena-hackathons.routes.ts",
        "/api/arena/users": "backend/src/api/arena-users.routes.ts",
        "/api/nirvana": "backend/src/api/nirvana.routes.ts",
        "/api/notifications": "backend/src/api/notification.routes.ts",
        "/api/webhooks": "backend/src/api/webhook.routes.ts"
      },
      "endpoints": {
        "/api/health": [
          {"method": "GET", "path": "/", "controller": "getHealth"},
          {"method": "GET", "path": "/change-streams", "controller": "getChangeStreamsStatus"}
        ],
        "/api/users": [
          {"method": "POST", "path": "/webhooks/clerk", "controller": "handleClerkWebhook", "public": true},
          {"method": "GET", "path": "/leaderboard/streak", "controller": "getStreakLeaderboard", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "GET", "path": "/me", "controller": "getCurrentUser", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/role", "controller": "getUserRole", "middleware": ["protect"]},
          {"method": "PATCH", "path": "/me", "controller": "updateCurrentUser", "middleware": ["protect"]},
          {"method": "PATCH", "path": "/me/background", "controller": "updateProfileBackground", "middleware": ["protect"]},
          {"method": "POST", "path": "/me/visit", "controller": "recordDailyVisitController", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/streak", "controller": "getStreakInfoController", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/streak-percentile", "controller": "getStreakPercentileController", "middleware": ["protect"]},
          {"method": "PATCH", "path": "/me/password", "controller": "changePasswordController", "middleware": ["protect"]},
          {"method": "PATCH", "path": "/me/skills", "controller": "updateSkillsController", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/me", "controller": "deleteAccountController", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/export", "controller": "exportUserDataController", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/projects", "controller": "getUserProjectsController", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/workspace-preferences", "controller": "getWorkspacePreferencesController", "middleware": ["protect"]},
          {"method": "PATCH", "path": "/me/workspace-preferences", "controller": "updateWorkspacePreferencesController", "middleware": ["protect"]},
          {"method": "GET", "path": "/me/bookmarks", "controller": "getBookmarkedResourcesController", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/me/bookmarks/:resourceId", "controller": "removeBookmarkController", "middleware": ["protect"]}
        ],
        "/api/crucible": [
          {"method": "GET", "path": "/", "controller": "getAllChallenges", "middleware": ["standardLimiter", "cache(600)"]},
          {"method": "GET", "path": "/trending", "controller": "getTrendingChallenges", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "GET", "path": "/:id", "controller": "getChallengeById", "middleware": ["standardLimiter", "cache(600)"]},
          {"method": "GET", "path": "/:challengeId/solutions", "controller": "getSolutions", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "POST", "path": "/:challengeId/solutions", "controller": "submitSolution", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/analyze", "controller": "analyzeUserSolution", "middleware": ["protect"]},
          {"method": "GET", "path": "/results/:analysisId", "controller": "getAnalysisResult", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/solutions/latest", "controller": "getLatestAnalysisForUserProblem", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/solutions/history", "controller": "getAnalysisHistoryForUserProblem", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/solutions/last-submitted", "controller": "getLastSubmittedSolution", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/draft", "controller": "getDraft", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/draft", "controller": "updateDraft", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/draft/archive", "controller": "archiveDraft", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/draft/reattempt", "controller": "reattemptDraft", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/notes", "controller": "getNotes", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/notes", "controller": "updateNotes", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/:problemId/notes", "controller": "deleteNotes", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/chats", "controller": "getChatSessions", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/chats", "controller": "createChatSession", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/chats/:chatId", "controller": "getChatSession", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/chats/:chatId/messages", "controller": "addChatMessage", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/chats/:chatId/messages/stream", "controller": "addChatMessageStream", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/chats/:chatId", "controller": "updateChatSession", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/:problemId/chats/:chatId", "controller": "deleteChatSession", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/workspace", "controller": "getWorkspaceState", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/workspace", "controller": "updateWorkspaceState", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/diagrams", "controller": "getDiagrams", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/diagrams", "controller": "createDiagram", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/diagrams/:diagramId", "controller": "getDiagram", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/diagrams/:diagramId", "controller": "updateDiagram", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/:problemId/diagrams/:diagramId", "controller": "deleteDiagram", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/progress", "controller": "getProgress", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/progress", "controller": "updateProgress", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/progress/milestones/:milestoneId", "controller": "updateMilestone", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/progress/milestones", "controller": "addMilestone", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/:problemId/progress/milestones/:milestoneId", "controller": "deleteMilestone", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/research", "controller": "getResearchItems", "middleware": ["protect"]},
          {"method": "POST", "path": "/:problemId/research", "controller": "createResearchItem", "middleware": ["protect"]},
          {"method": "GET", "path": "/:problemId/research/:itemId", "controller": "getResearchItem", "middleware": ["protect"]},
          {"method": "PUT", "path": "/:problemId/research/:itemId", "controller": "updateResearchItem", "middleware": ["protect"]},
          {"method": "DELETE", "path": "/:problemId/research/:itemId", "controller": "deleteResearchItem", "middleware": ["protect"]}
        ],
        "/api/forge": [
          {"method": "GET", "path": "/", "controller": "getAllResources", "middleware": ["standardLimiter", "cache(600)"]},
          {"method": "GET", "path": "/:id", "controller": "getResourceById", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "POST", "path": "/:id/view", "controller": "incrementResourceView", "middleware": ["protect"]},
          {"method": "POST", "path": "/:id/bookmark", "controller": "bookmarkResource", "middleware": ["protect"]},
          {"method": "POST", "path": "/:id/review", "controller": "reviewResource", "middleware": ["protect"]}
        ],
        "/api/ai": [
          {"method": "POST", "path": "/ask", "controller": "askAI", "middleware": ["protect", "aiLimiter"]},
          {"method": "POST", "path": "/analyze-solution", "controller": "analyzeUserSolution", "middleware": ["protect", "aiLimiter"]},
          {"method": "POST", "path": "/generate-hints", "controller": "generateProblemHints", "middleware": ["protect", "aiLimiter"]}
        ],
        "/api/profile": [
          {"method": "GET", "path": "/crucible/analyses", "controller": "getUserAnalysisHistory", "middleware": ["standardLimiter", "protect"]},
          {"method": "GET", "path": "/crucible/drafts", "controller": "getUserActiveDrafts", "middleware": ["standardLimiter", "protect"]}
        ],
        "/api/admin": [
          {"method": "GET", "path": "/users", "controller": "getAllUsers", "middleware": ["protect", "checkRole(admin|moderator)"]},
          {"method": "GET", "path": "/showcase", "controller": "getShowcaseProjects", "middleware": ["protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/showcase/:projectId/approve", "controller": "approveShowcaseProject", "middleware": ["protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/showcase/:projectId/reject", "controller": "rejectShowcaseProject", "middleware": ["protect", "checkRole(admin|moderator)"]}
        ],
        "/api/arena/channels": [
          {"method": "GET", "path": "/", "controller": "getChannels", "middleware": ["standardLimiter", "protect", "cache(300)"]},
          {"method": "GET", "path": "/all", "controller": "getAllChannelsForJoin", "middleware": ["standardLimiter", "protect", "cache(300)"]},
          {"method": "GET", "path": "/unread-counts", "controller": "getAllUnreadCounts", "middleware": ["standardLimiter", "protect"]},
          {"method": "GET", "path": "/:channelId/messages", "controller": "getChannelMessages", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/:channelId/messages", "controller": "createMessage", "middleware": ["standardLimiter", "protect"]},
          {"method": "DELETE", "path": "/:channelId/messages/:messageId", "controller": "deleteMessage", "middleware": ["standardLimiter", "protect"]},
          {"method": "GET", "path": "/:channelId/unread-count", "controller": "getUnreadMessageCount", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/:channelId/mark-read", "controller": "markAllAsRead", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/:channelId/join", "controller": "joinChannelRequest", "middleware": ["standardLimiter", "protect"]},
          {"method": "DELETE", "path": "/:channelId/leave", "controller": "leaveChannel", "middleware": ["standardLimiter", "protect"]},
          {"method": "GET", "path": "/join-requests", "controller": "getAllJoinRequests", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/join-requests/:userId/:channelId/accept", "controller": "acceptJoinRequest", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/join-requests/:userId/:channelId/reject", "controller": "rejectJoinRequest", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/join-requests/:userId/accept-all", "controller": "acceptAllJoinRequests", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/join-requests/:userId/reject-all", "controller": "rejectAllJoinRequests", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/:parentChannelId/ban", "controller": "banOrKickUserFromParentChannel", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "POST", "path": "/:parentChannelId/unban", "controller": "unbanUserFromParentChannel", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "GET", "path": "/user-channel-status", "controller": "getUserChannelStatus", "middleware": ["protect"]},
          {"method": "GET", "path": "/user-channel-status/:userId", "controller": "getUserChannelStatusForAdmin", "middleware": ["protect", "checkRole(admin|moderator)"]},
          {"method": "PATCH", "path": "/:channelId/description", "controller": "updateChannelDescription", "middleware": ["standardLimiter", "protect", "checkRole(admin)"]}
        ],
        "/api/arena/showcase": [
          {"method": "GET", "path": "/", "controller": "getShowcasedProjects", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "POST", "path": "/", "controller": "submitProject", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/:projectId/upvote", "controller": "upvoteProject", "middleware": ["standardLimiter", "protect"]},
          {"method": "DELETE", "path": "/:projectId/upvote", "controller": "removeUpvote", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/:projectId/downvote", "controller": "downvoteProject", "middleware": ["standardLimiter", "protect"]},
          {"method": "DELETE", "path": "/:projectId/downvote", "controller": "removeDownvote", "middleware": ["standardLimiter", "protect"]}
        ],
        "/api/arena/hackathons": [
          {"method": "GET", "path": "/current", "controller": "getCurrentHackathon", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "GET", "path": "/:hackathonId/leaderboard", "controller": "getHackathonLeaderboard", "middleware": ["standardLimiter", "cache(60)"]},
          {"method": "POST", "path": "/:hackathonId/submit", "controller": "submitHackathonSolution", "middleware": ["standardLimiter", "protect"]},
          {"method": "GET", "path": "/history", "controller": "getHackathonHistory", "middleware": ["standardLimiter", "cache(600)"]}
        ],
        "/api/arena/users": [
          {"method": "POST", "path": "/:userId/ban", "controller": "banUser", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator, true)"]},
          {"method": "POST", "path": "/:userId/unban", "controller": "unbanUser", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator, true)"]},
          {"method": "POST", "path": "/:userId/kick", "controller": "kickUser", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator, true)"]},
          {"method": "POST", "path": "/:userId/make-moderator", "controller": "makeModerator", "middleware": ["standardLimiter", "protect", "checkRole(admin, true)"]}
        ],
        "/api/nirvana": [
          {"method": "GET", "path": "/feed", "controller": "getNirvanaFeed", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "POST", "path": "/hackathons", "controller": "createHackathon", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/news", "controller": "createNews", "middleware": ["standardLimiter", "protect"]},
          {"method": "POST", "path": "/tools", "controller": "createTool", "middleware": ["standardLimiter", "protect"]},
          {"method": "PATCH", "path": "/:type/:id/reaction", "controller": "updateReaction", "middleware": ["standardLimiter", "protect"]},
          {"method": "PATCH", "path": "/:type/:id/pin", "controller": "togglePin", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "PATCH", "path": "/:type/:id/verify", "controller": "toggleVerification", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "PATCH", "path": "/:type/:id/priority", "controller": "updatePriority", "middleware": ["standardLimiter", "protect", "checkRole(admin|moderator)"]},
          {"method": "PUT", "path": "/:type/:id", "controller": "updateItem", "middleware": ["standardLimiter", "protect"]},
          {"method": "DELETE", "path": "/:type/:id", "controller": "deleteItem", "middleware": ["standardLimiter", "protect"]}
        ],
        "/api/notifications": [
          {"method": "(all)", "path": "*", "middleware": ["protect"]},
          {"method": "GET", "path": "/", "controller": "getNotifications", "middleware": ["standardLimiter", "cache(60)"]},
          {"method": "GET", "path": "/stats", "controller": "getNotificationStatsController", "middleware": ["standardLimiter", "cache(300)"]},
          {"method": "PUT", "path": "/:id/read", "controller": "markAsRead", "middleware": ["standardLimiter"]},
          {"method": "PUT", "path": "/read-all", "controller": "markAllAsRead", "middleware": ["standardLimiter"]},
          {"method": "PUT", "path": "/:id/archive", "controller": "archiveNotificationController", "middleware": ["standardLimiter"]},
          {"method": "DELETE", "path": "/:id", "controller": "deleteNotificationController", "middleware": ["standardLimiter"]},
          {"method": "POST", "path": "/custom", "controller": "createCustomNotification", "middleware": ["standardLimiter"]},
          {"method": "POST", "path": "/bulk", "controller": "createBulkNotificationsController", "middleware": ["standardLimiter"]}
        ],
        "/api/webhooks": [
          {"method": "POST", "path": "/", "controller": "clerkWebhookHandler", "rawBody": true}
        ]
      }
    },
    "controllers": {
      "files": [
        "admin.controller.ts", "ai.controller.ts", "aiChat.controller.ts", "arenaChannels.controller.ts",
        "arenaHackathons.controller.ts", "arenaShowcase.controller.ts", "arenaUsers.controller.ts",
        "crucible.controller.ts", "crucibleDiagram.controller.ts", "crucibleNote.controller.ts",
        "forge.controller.ts", "health.controller.ts", "nirvanaFeed.controller.ts",
        "notification.controller.ts", "profile.controller.ts", "progressTracking.controller.ts",
        "researchItem.controller.ts", "solutionDraft.controller.ts", "user.controller.ts",
        "webhook.controller.ts", "workspaceState.controller.ts"
      ],
      "notes": "Routing section maps methods to these controller methods by name."
    },
    "models": {
      "User": {
        "file": "backend/src/models/user.model.ts",
        "keyFields": {
          "clerkId": "string, unique",
          "email": "string, unique",
          "username": "string, unique",
          "profile": {"headline": "string", "bio": "string", "aboutMe": "string", "location": "string", "skills": "string[]", "toolsAndTech": "string[]"},
          "stats": {"problemsSolved": "number", "resourcesCreated": "number", "reputation": "number"},
          "bookmarkedResources": "ObjectId[ForgeResource]",
          "workspacePreferences": {"editorSettings": {"fontSize": "number", "theme": "string", "wordWrap": "boolean"}, "layout": {"showProblemSidebar": "boolean", "showChatSidebar": "boolean", "sidebarWidths": {"problem": "number", "chat": "number"}}, "notifications": {"channelUpdates": "boolean", "projectApprovals": "boolean", "mentions": "boolean"}},
          "socialLinks": {"portfolio": "string", "github": "string", "linkedin": "string", "twitter": "string"},
          "zemonStreak": "number",
          "longestZemonStreak": "number",
          "lastZemonVisit": "Date"
        }
      },
      "ForgeResource": {
        "file": "backend/src/models/forgeResource.model.ts",
        "keyFields": {
          "title": "string",
          "type": "'article'|'video'|'book'|'course'|'tool'|'repository'|'documentation'",
          "url": "string?",
          "description": "string",
          "content": "string?",
          "contentType": "'markdown'|'html' (default markdown)",
          "tags": "string[]",
          "difficulty": "'beginner'|'intermediate'|'advanced'",
          "createdBy": "ObjectId(User)",
          "reviews": "[{ userId, rating, comment, createdAt }]",
          "metrics": "{ views, bookmarks, rating }",
          "isExternal": "boolean (default based on presence of url)"
        }
      },
      "CrucibleProblem": {
        "file": "backend/src/models/crucibleProblem.model.ts",
        "keyFields": {
          "title": "string",
          "description": "string",
          "difficulty": "'easy'|'medium'|'hard'|'expert'",
          "category": "'algorithms'|'system-design'|'web-development'|'mobile-development'|'data-science'|'devops'|'frontend'|'backend'",
          "tags": "string[]",
          "requirements": "{ functional: string[], nonFunctional: string[] }",
          "constraints": "string[]",
          "expectedOutcome": "string",
          "hints": "string[]",
          "createdBy": "ObjectId(User)",
          "metrics": "{ attempts, solutions, successRate }",
          "estimatedTime": "number?",
          "learningObjectives": "string[]",
          "prerequisites": "[{ name, link }]",
          "userPersona": "{ name, journey }",
          "dataAssumptions": "string[]",
          "edgeCases": "string[]",
          "relatedResources": "[{ title, link }]",
          "subtasks": "string[]",
          "communityTips": "[{ content, author }]",
          "aiPrompts": "string[]",
          "technicalParameters": "string[]",
          "status": "'draft'|'published'|'archived'"
        }
      },
      "CrucibleSolution": {
        "file": "backend/src/models/crucibleSolution.model.ts",
        "keyFields": {
          "problemId": "ObjectId(CrucibleProblem)",
          "userId": "ObjectId(User)",
          "content": "string",
          "status": "'draft'|'submitted'|'reviewed'",
          "aiAnalysis": "{ score, feedback, suggestions[] }",
          "reviews": "[{ userId, rating, comment, createdAt }]",
          "metrics": "{ upvotes, downvotes, views }"
        }
      },
      "SolutionDraft": {
        "file": "backend/src/models/solutionDraft.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "problemId": "ObjectId(CrucibleProblem)",
          "currentContent": "string",
          "status": "'active'|'archived'",
          "lastEdited": "Date",
          "autoSaveEnabled": "boolean"
        }
      },
      "CrucibleNote": {
        "file": "backend/src/models/crucibleNote.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "problemId": "ObjectId(CrucibleProblem)",
          "content": "string",
          "tags": "string[]",
          "status": "'active'|'archived' (unique per userId+problemId)"
        }
      },
      "CrucibleDiagram": {
        "file": "backend/src/models/crucibleDiagram.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "problemId": "ObjectId(CrucibleProblem)",
          "title": "string",
          "type": "'architecture'|'flowchart'|'er-diagram'|'sequence'|'other'",
          "content": "string",
          "thumbnail": "string",
          "status": "'active'|'archived'"
        }
      },
      "WorkspaceState": {
        "file": "backend/src/models/workspaceState.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "problemId": "ObjectId(CrucibleProblem)",
          "activeMode": "'solution'|'notes'|'diagram'|'research'",
          "layout": "{ showProblemSidebar, showChatSidebar, sidebarWidths: { problem, chat } }",
          "editorSettings": "{ fontSize, theme, wordWrap }"
        }
      },
      "SolutionAnalysis": {
        "file": "backend/src/models/solutionAnalysis.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "problemId": "ObjectId(CrucibleProblem)",
          "solutionContent": "string (optional for legacy)",
          "overallScore": "0-100",
          "aiConfidence": "0-100",
          "summary": "string",
          "evaluatedParameters": "[{ name, score, justification }]",
          "feedback": "{ strengths[], areasForImprovement[], suggestions[] }"
        }
      },
      "Notification": {
        "file": "backend/src/models/notification.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "type": "'hackathon'|'news'|'channel'|'problem'|'resource'|'project_approval'|'custom'|'system'",
          "title": "string",
          "message": "string",
          "data": "{ entityId?, entityType?, action?, metadata }",
          "priority": "'low'|'medium'|'high'|'urgent'",
          "isRead": "boolean",
          "isArchived": "boolean",
          "readAt": "Date?",
          "expiresAt": "Date? (TTL index)"
        }
      },
      "ArenaChannel": {
        "file": "backend/src/models/arenaChannel.model.ts",
        "keyFields": {
          "name": "string",
          "type": "'chat'|'announcement'|'showcase'|'info'",
          "group": "'getting-started'|'community'|'hackathons'",
          "description": "string",
          "isActive": "boolean",
          "createdBy": "ObjectId(User)",
          "moderators": "ObjectId(User)[]",
          "permissions": "{ canMessage, canRead }",
          "parentChannelId": "ObjectId(ArenaChannel)|null"
        }
      },
      "ArenaMessage": {
        "file": "backend/src/models/arenaMessage.model.ts",
        "keyFields": {
          "channelId": "ObjectId(ArenaChannel)",
          "userId": "ObjectId(User)",
          "username": "string",
          "content": "string",
          "type": "'text'|'system'",
          "replyToId": "ObjectId(ArenaMessage)?",
          "mentions": "ObjectId(User)[]",
          "timestamp": "Date",
          "isEdited": "boolean",
          "isDeleted": "boolean",
          "deletedAt": "Date?",
          "deletedBy": "ObjectId(User)?"
        }
      },
      "UserChannelStatus": {
        "file": "backend/src/models/userChannelStatus.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "channelId": "ObjectId(ArenaChannel)",
          "lastReadMessageId": "ObjectId(ArenaMessage)?",
          "lastReadTimestamp": "Date",
          "isBanned": "boolean",
          "banExpiresAt": "Date?",
          "banReason": "string?",
          "isKicked": "boolean",
          "kickedAt": "Date?",
          "status": "'pending'|'approved'|'denied'|'banned'|'kicked'"
        }
      },
      "UserRole": {
        "file": "backend/src/models/userRole.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "role": "'user'|'moderator'|'admin'",
          "channelId": "ObjectId(ArenaChannel)? (null for global role)",
          "grantedBy": "ObjectId(User)",
          "grantedAt": "Date"
        }
      },
      "NirvanaHackathon": {
        "file": "backend/src/models/nirvanaHackathon.model.ts",
        "keyFields": {
          "title": "string",
          "content": "string",
          "description": "string",
          "prize": "string",
          "participants": "number",
          "category": "string",
          "tags": "string[]",
          "deadline": "Date",
          "status": "'active'|'upcoming'|'completed'",
          "isPinned": "boolean",
          "isVerified": "boolean",
          "priority": "'high'|'medium'|'low'",
          "createdBy": "ObjectId(User)",
          "reactions": "{ likes, shares, bookmarks }",
          "userReactions": "{ likes: ObjectId[], shares: ObjectId[], bookmarks: ObjectId[] }",
          "metadata": "{ hackathonName, link?, image? }"
        }
      },
      "NirvanaNews": {
        "file": "backend/src/models/nirvanaNews.model.ts",
        "keyFields": {
          "title": "string",
          "content": "string",
          "category": "string",
          "tags": "string[]",
          "isPinned": "boolean",
          "isVerified": "boolean",
          "priority": "'high'|'medium'|'low'",
          "createdBy": "ObjectId(User)",
          "reactions": "{ likes, shares, bookmarks }",
          "userReactions": "{ likes: ObjectId[], shares: ObjectId[], bookmarks: ObjectId[] }",
          "metadata": "{ progress?, link?, image? }"
        }
      },
      "NirvanaTool": {
        "file": "backend/src/models/nirvanaTool.model.ts",
        "keyFields": {
          "title": "string",
          "content": "string",
          "toolName": "string",
          "category": "string",
          "tags": "string[]",
          "rating": "0-5",
          "views": "number",
          "isPinned": "boolean",
          "isVerified": "boolean",
          "priority": "'high'|'medium'|'low'",
          "createdBy": "ObjectId(User)",
          "reactions": "{ likes, shares, bookmarks }",
          "userReactions": "{ likes: ObjectId[], shares: ObjectId[], bookmarks: ObjectId[] }",
          "metadata": "{ link?, image? }"
        }
      },
      "WeeklyHackathon": {
        "file": "backend/src/models/weeklyHackathon.model.ts",
        "keyFields": {
          "title": "string",
          "description": "string",
          "problem": "string",
          "constraints": "string[]",
          "startDate": "Date",
          "endDate": "Date",
          "isActive": "boolean",
          "createdBy": "ObjectId(User)",
          "winners": "[{ userId, username, position, score }]",
          "leaderboard": "[{ userId, username, score, submissionTime }]"
        }
      },
      "HackathonSubmission": {
        "file": "backend/src/models/hackathonSubmission.model.ts",
        "keyFields": {
          "hackathonId": "ObjectId(WeeklyHackathon)",
          "userId": "ObjectId(User)",
          "username": "string",
          "solution": "string",
          "codeFiles": "string[]",
          "demoUrl": "string?",
          "explanation": "string",
          "submittedAt": "Date",
          "score": "number?",
          "feedback": "string?",
          "isWinner": "boolean",
          "position": "number?"
        }
      },
      "AIChatHistory": {
        "file": "backend/src/models/aiChatHistory.model.ts",
        "keyFields": {
          "userId": "ObjectId(User)",
          "problemId": "ObjectId(CrucibleProblem)",
          "title": "string",
          "messages": "[{ role: 'user'|'assistant', content, timestamp }]",
          "status": "'active'|'archived'"
        }
      }
    },
    "services": {
      "socket": {
        "file": "backend/src/services/socket.service.ts",
        "initialize": "initializeSocketIO(server)",
        "rooms": {"user": "user:{userId}", "channel": "channel:{channelId}"},
        "handlers": [
          "connection -> join user room",
          "join_channel (validates membership & bans)",
          "leave_channel",
          "send_message (rate-limited; validates channel & membership; saves ArenaMessage; updates unread counts)",
          "read_status (updates last read and confirms)",
          "typing (broadcasts user_typing)",
          "disconnect",
          "role_updated (emits to user and channel)",
          "channel_permissions_updated (emits to channel)"
        ],
        "emitters": ["emitToChannel", "emitToUser", "updateUnreadCounts"]
      },
      "notifications": {
        "file": "backend/src/services/notification.service.ts",
        "capabilities": [
          "createNotification -> emits 'notification_received'",
          "createBulkNotifications -> per-user emit",
          "getUserNotifications (pagination + filters)",
          "markNotificationAsRead -> emits 'notification_updated'",
          "markAllNotificationsAsRead -> emits 'all_notifications_read'",
          "archiveNotification -> emits 'notification_archived'",
          "deleteNotification -> emits 'notification_deleted'",
          "getNotificationStats",
          "cleanupExpiredNotifications"
        ]
      },
      "changeStreams": {
        "file": "backend/src/services/changeStreams.service.ts",
        "watches": "Notification collection (insert events)",
        "resumeTokenStorage": "Mongo collection changeStreamResumeTokens",
        "emits": "notification_received",
        "autoRestartOnError": true
      }
    },
    "realtimeEvents": {
      "socketIn": ["join_channel", "leave_channel", "send_message", "read_status", "typing", "role_updated", "channel_permissions_updated"],
      "socketOut": ["channel_joined", "new_message", "read_status_updated", "user_typing", "unread_counts_updated", "role_updated", "user_role_updated", "channel_permissions_updated", "error"],
      "notificationsOut": ["notification_received", "notification_updated", "all_notifications_read", "notification_archived", "notification_deleted"]
    }
  },
  "frontend": {
    "overview": {
      "entryFile": "frontend/src/App.tsx",
      "router": "react-router-dom (BrowserRouter)",
      "auth": "@clerk/clerk-react",
      "ui": "Tailwind/DaisyUI + custom components",
      "socket": "socket.io-client"
    },
    "routing": {
      "publicRoutes": ["/", "/signin", "/signup", "/about", "/blogs", "/pricing", "/developers"],
      "protectedUsernameScoped": {
        "pattern": "/:username/*",
        "pages": [
          "/:username (ProfilePage)",
          "/:username/dashboard (DashboardPage)",
          "/:username/forge (ForgePage)",
          "/:username/forge/:id (ForgeDetailPage)",
          "/:username/forge/category/:categoryId (ForgeCategoryPage)",
          "/:username/crucible (CruciblePage)",
          "/:username/crucible/category/:categoryId (CrucibleCategoryPage)",
          "/:username/crucible/problem/:id (CrucibleProblemPage)",
          "/:username/crucible/problem/:id/result (ResultPage)",
          "/:username/crucible/results/:analysisId (ResultPage)",
          "/:username/arena (ArenaPage)",
          "/:username/admin (AdminPage via ProtectedAdminRoute)",
          "/:username/settings (SettingsPage)"
        ]
      },
      "rootRedirect": "Signed-in users at / -> /:username/dashboard"
    },
    "auth": {
      "provider": "ClerkProvider",
      "publishableKeyEnv": "VITE_CLERK_PUBLISHABLE_KEY",
      "tokenUsage": "Pages and API libs call useAuth().getToken() and send Authorization: Bearer {token} to backend"
    },
    "dataFetching": {
      "baseUrls": {
        "API_BASE_URL": "import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api'",
        "BACKEND_URL": "import.meta.env.VITE_BACKEND_URL || 'http://localhost:3001'"
      },
      "libraries": {
        "crucibleApi.ts": {
          "public": [
            {"fn": "getProblems(filters?)", "GET": "/crucible"},
            {"fn": "getProblem(id)", "GET": "/crucible/:id"},
            {"fn": "getTrendingProblems(limit)", "GET": "/crucible/trending?limit="}
          ],
          "protected": [
            {"fn": "getDraft(problemId)", "GET": "/crucible/:problemId/draft"},
            {"fn": "updateDraft(problemId, content)", "PUT": "/crucible/:problemId/draft"},
            {"fn": "getNotes(problemId)", "GET": "/crucible/:problemId/notes"},
            {"fn": "updateNotes(problemId, content, tags)", "PUT": "/crucible/:problemId/notes"},
            {"fn": "submitSolution(problemId)", "POST": "/crucible/:problemId/solution"},
            {"fn": "submitSolutionForAnalysis(problemId)", "POST": "/crucible/:problemId/analyze"},
            {"fn": "getAnalysisResult(analysisId)", "GET": "/crucible/results/:analysisId"},
            {"fn": "getLatestAnalysis(problemId)", "GET": "/crucible/:problemId/solutions/latest"},
            {"fn": "getAnalysisHistory(problemId)", "GET": "/crucible/:problemId/solutions/history"},
            {"fn": "getLastSubmittedSolution(problemId)", "GET": "/crucible/:problemId/solutions/last-submitted"},
            {"fn": "reattemptDraft(problemId)", "POST": "/crucible/:problemId/draft/reattempt"}
          ]
        },
        "forgeApi.ts": {
          "public": [
            {"fn": "getForgeResources({type,tags,difficulty,page,limit})", "GET": "/forge?{query}"},
            {"fn": "getForgeResource(id)", "GET": "/forge/:id"}
          ],
          "protected": [
            {"fn": "registerForgeResourceView(id)", "POST": "/forge/:id/view"},
            {"fn": "toggleBookmark(id)", "POST": "/forge/:id/bookmark"},
            {"fn": "getBookmarkedResources()", "GET": "/users/me"}
          ]
        },
        "profileApi.ts": {
          "protected": [
            {"fn": "getUserAnalysisHistory()", "GET": "/profile/crucible/analyses"},
            {"fn": "getUserActiveDrafts()", "GET": "/profile/crucible/drafts"}
          ]
        },
        "notificationApi.ts": {
          "protected": [
            {"fn": "getNotifications(filters)", "GET": "/notifications"},
            {"fn": "getNotificationStats()", "GET": "/notifications/stats"},
            {"fn": "markNotificationAsRead(id)", "PUT": "/notifications/:id/read"},
            {"fn": "markAllNotificationsAsRead()", "PUT": "/notifications/read-all"},
            {"fn": "archiveNotification(id)", "PUT": "/notifications/:id/archive"},
            {"fn": "deleteNotification(id)", "DELETE": "/notifications/:id"},
            {"fn": "createCustomNotification(data)", "POST": "/notifications/custom"},
            {"fn": "createBulkNotifications(data)", "POST": "/notifications/bulk"},
            {"fn": "cleanupExpiredNotifications()", "DELETE": "/notifications/cleanup"}
          ]
        },
        "settingsApi.ts": {
          "protected": [
            {"fn": "updateProfile(data)", "PATCH": "/users/me"},
            {"fn": "changePassword(data)", "PATCH": "/users/me/password"},
            {"fn": "updateSkills(data)", "PATCH": "/users/me/skills"},
            {"fn": "deleteAccount()", "DELETE": "/users/me"},
            {"fn": "exportUserData()", "GET": "/users/me/export"},
            {"fn": "getUserProjects()", "GET": "/users/me/projects"},
            {"fn": "submitProject(data)", "POST": "/arena/showcase"},
            {"fn": "updateProject(projectId, data)", "PATCH": "/arena/showcase/:projectId"},
            {"fn": "deleteProject(projectId)", "DELETE": "/arena/showcase/:projectId"},
            {"fn": "getWorkspacePreferences()", "GET": "/users/me/workspace-preferences"},
            {"fn": "updateWorkspacePreferences(data)", "PATCH": "/users/me/workspace-preferences"},
            {"fn": "getBookmarkedResources()", "GET": "/users/me/bookmarks"},
            {"fn": "removeBookmark(resourceId, resourceType)", "DELETE": "/users/me/bookmarks/:resourceId"}
          ]
        },
        "services/api.service.ts": {
          "class": "ApiService",
          "usage": "Arena UI helpers (channels/messages) using makeRequest with getToken()",
          "baseUrl": "import.meta.env.VITE_BACKEND_URL"
        }
      },
      "pagesToBackend": {
        "ForgePage": ["GET /forge?{query}", "GET /users/me (bookmarked)", "POST /forge/:id/bookmark (toggle)"],
        "ForgeDetailPage": ["POST /forge/:id/view -> returns resource; page renders markdown or HTML via HtmlContentRenderer"],
        "CruciblePage": ["GET /crucible (public)", "GET /crucible/trending (public)"],
        "CrucibleProblemPage": ["GET /crucible/:id (public)", "GET /crucible/:id/draft (auth)", "GET /crucible/:id/notes (auth)", "PUT /crucible/:id/draft (create if missing)"],
        "ArenaPage": ["ApiService.getChannels", "getUserChannelStatuses"],
        "ProfilePage": ["PATCH /users/me/background", "GET /profile/crucible/analyses", "GET /profile/crucible/drafts", "GET /users/me (bookmarks via forgeApi)"],
        "SettingsPage": ["PATCH /users/me", "PATCH /users/me/password", "DELETE /users/me", "GET/PATCH /users/me/workspace-preferences", "GET /users/me/projects", "POST/PATCH/DELETE /arena/showcase"]
      }
    },
    "sockets": {
      "client": {
        "file": "frontend/src/services/socket.service.ts",
        "connect": "io(VITE_BACKEND_URL, { auth: { token: 'Bearer {token}' } })",
        "eventsHandled": ["connect", "disconnect", "connect_error", "error"],
        "state": ["isConnected", "isConnecting"]
      },
      "context": {
        "SocketContext.tsx": "Initializes a global socket connection when user is signed-in; auto-reconnect; cleans up on sign-out"
      },
      "arenaUsage": "Arena components rely on both REST and Socket.IO; channel selection emits join/leave and listens for new_message, user_typing, etc"
    },
    "contexts": {
      "UserRoleContext": {
        "file": "frontend/src/context/UserRoleContext.tsx",
        "fetch": "GET /api/users/me/role with Bearer token",
        "cache": "5 minutes",
        "realtime": "Listens to 'role_updated' and 'channel_permissions_updated' via socket to refetch"
      },
      "SocketContext": {
        "file": "frontend/src/context/SocketContext.tsx",
        "behavior": "Creates/tears down socket tied to Clerk auth state; exposes socket, isConnected, isConnecting"
      },
      "Workspace/Sidebar/Theme": "Shared layout and UX contexts"
    }
  },
  "env": {
    "backend": [
      "PORT", "SOCKET_IO_PORT", "CORS_ORIGIN", "CLERK_JWT_KEY", "CLERK_SECRET_KEY", "CLERK_ISSUER", "ENABLE_CHANGE_STREAMS", "CACHE_ENABLED", "MONGODB_URI", "REDIS_URL"
    ],
    "frontend": [
      "VITE_CLERK_PUBLISHABLE_KEY", "VITE_API_BASE_URL", "VITE_BACKEND_URL"
    ]
  },
  "userFlows": {
    "auth": {
      "signIn": "Public pages accessible; upon sign-in, RootRoute redirects to /:username/dashboard",
      "protected": "All username-scoped routes require Clerk session; backend require protect middleware"
    },
    "arenaMessaging": [
      "User opens ArenaPage -> REST fetch channels and statuses -> selects channel",
      "Client socket 'join_channel' -> server validates membership/bans -> joins room",
      "User sends message -> client emits 'send_message' -> server validates, persists, broadcasts 'new_message', updates unread counts",
      "User reads -> client emits 'read_status' -> updates lastRead and emits confirmation"
    ],
    "notifications": [
      "Server creates Notification -> emits 'notification_received' to user room via Socket.IO",
      "User opens notifications UI -> REST GET /notifications with pagination and filters",
      "Marking read/archive/delete -> corresponding REST calls emit updates"
    ]
  }
}
